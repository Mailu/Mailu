branches:
  only:
    - staging
    - testing
    - '1.5'
    - '1.6'
    - '1.7'
    - '1.8'
    - master
    # version tags, e.g. 1.7.1
    - /^1\.[5678]\.\d+$/
    # pre-releases, e.g. 1.8-pre1
    - /^1\.8-pre\d+$/
    # test branches, e.g. test-debian
    - /^test-[\w\-\.]+$/

stages:
  - install
  - test
  - deploy

services: docker

env:
  - MAILU_VERSION=${TRAVIS_BRANCH////-} MAILU_PLTFRM="${TRAVIS_CPU_ARCH}-" MAILU_CI="-ci"

language: python
python:
  - "3.6"

jobs:
  include:
# install stage will build and push 
# all images (names will get the suffix defined bu MAILU_CI)
# install stage for amd architecture:
    - stage: install
      script:
      - pip install -r tests/requirements.txt
      - docker-compose -v
      - source tests/define_MAILU_VERSION.sh
      - docker login -u $DOCKER_UN -p $DOCKER_PW
      - docker-compose -f tests/build.yml build
      - docker-compose -f tests/build.yml push
      arch: amd64
# install stage for arm64 architecture:
# "admin" images take long time to build
# we build it a seperate job
# install stage for arm, all images except admin:
    - stage: install
      script:
      - pip install -r tests/requirements.txt
      - docker-compose -v
      - source tests/define_MAILU_VERSION.sh
      - docker login -u $DOCKER_UN -p $DOCKER_PW
      - docker-compose -f tests/build.yml build front resolver imap smtp antispam antivirus webdav traefik-certdumper postgresql roundcube rainloop fetchmail none docs setup 
      - docker-compose -f tests/build.yml push  front resolver imap smtp antispam antivirus webdav traefik-certdumper postgresql roundcube rainloop fetchmail none docs setup
      arch: arm64
# install stage for arm, dedicated to admin:
    - stage: install
      script:
      - pip install -r tests/requirements.txt
      - docker-compose -v
      - source tests/define_MAILU_VERSION.sh
      - docker login -u $DOCKER_UN -p $DOCKER_PW
      - docker-compose -f tests/build.yml build admin
      - docker-compose -f tests/build.yml push admin
      arch: arm64
# test stages
# amd64 test job all images except filter
    - stage: test
      script:
      - pip install -r tests/requirements.txt
      - source tests/define_MAILU_VERSION.sh
      - sudo -- sh -c 'mkdir -p /mailu && cp -r tests/certs /mailu && chmod 600 /mailu/certs/*'
# test.py, test name and timeout between start and tests.
      - docker login -u $DOCKER_UN -p $DOCKER_PW
      - python tests/compose/test.py core 1
      - python tests/compose/test.py fetchmail 1
      - python tests/compose/test.py rainloop 1
      - python tests/compose/test.py roundcube 1
      - python tests/compose/test.py webdav 1
      arch: amd64
# arm64 test job all images except filter
    - stage: test
      script:
      - pip install -r tests/requirements.txt
      - source tests/define_MAILU_VERSION.sh
      - sudo -- sh -c 'mkdir -p /mailu && cp -r tests/certs /mailu && chmod 600 /mailu/certs/*'
# test.py, test name and timeout between start and tests.
      - docker login -u $DOCKER_UN -p $DOCKER_PW
      - python tests/compose/test.py core 1
      - python tests/compose/test.py fetchmail 1
      - python tests/compose/test.py rainloop 1
      - python tests/compose/test.py roundcube 1
      - python tests/compose/test.py webdav 1
      arch: arm64
# amd64 test job for filter
    - stage: test
      script:
      - pip install -r tests/requirements.txt
      - source tests/define_MAILU_VERSION.sh
      - sudo -- sh -c 'mkdir -p /mailu && cp -r tests/certs /mailu && chmod 600 /mailu/certs/*'
# test.py, test name and timeout between start and tests.
      - docker login -u $DOCKER_UN -p $DOCKER_PW
      - python tests/compose/test.py core 1
      - python tests/compose/test.py filters 9
      arch: amd64
# arm64 test job for filter
    - stage: test
      script:
      - pip install -r tests/requirements.txt
      - source tests/define_MAILU_VERSION.sh
      - sudo -- sh -c 'mkdir -p /mailu && cp -r tests/certs /mailu && chmod 600 /mailu/certs/*'
# test.py, test name and timeout between start and tests.
      - docker login -u $DOCKER_UN -p $DOCKER_PW
      - python tests/compose/test.py core 1
      - python tests/compose/test.py filters 9 
      arch: arm64
# deploy stage
# retag and push the images (removing suffix defined bu MAILU_CI)
# create the multi-architecture amanifests for each image
    - stage: deploy
      script:
      - bash tests/deploy_manifest.sh
      arch: amd64
